@import "breakpoint";
@import "singularitygs";


$grids: 5;
$grids: add-grid(1 3 5 7 at 700px);
$grids: add-grid(9 at 900px);
$gutters: .25;
$gutters: add-gutter(.5 at 700px);
$gutters: add-gutter(.75 at 900px);

$layout-grid: 8, .3;

/**
  * Grid Overlay Mixin
  * - Adds a grid overlay
**/
.grid-overlay {
  /* Global Grid Context */
  _grids: "#{$grids}";
  _gutters: "#{$gutters}";
  /* Default Grid Overlay attaches to 'body' */
  _test: "@include grid-overlay";
}
@include grid-overlay;

@mixin grid-toggle-test {
  /* Default Grid Toggle */
  _test: "@include grid-toggle;";
  @include grid-toggle;
  /* Grid Toggle, Custom Columns */
  _test: "@include grid-toggle(1 3 5);";
  @include grid-toggle(1 3 5);
  /* Grid Toggle, Custom Gutters */
  _test: "@include grid-toggle($gutter: .3);";
  @include grid-toggle($gutter: .3);
  /* Grid Toggle, Custom Color */
  _test: "@include grid-toggle($color: blue);";
  @include grid-toggle($color: blue);
  /* Grid Toggle, Custom Columns, Gutters, Color */
  _test: "@include grid-toggle(1 3 5, .3, blue);";
  @include grid-toggle(1 3 5, .3, blue);
}

@mixin grid-toggle-layout {
  @include grid-toggle-test;
  /**
    * Layout Test
  **/
  _layout: "#{nth($layout-grid, 1)}";
  @include layout(nth($layout-grid, 1)) {
    @include grid-toggle-test;
  }
  _layout: "$gutter: nth($layout-grid, 2)}";
  @include layout($gutter: nth($layout-grid, 2)) {
    @include grid-toggle-test;
  }
  _layout: "#{$layout-grid}";
  @include layout(nth($layout-grid, 1), nth($layout-grid, 2)) {
    @include grid-toggle-test;
  }
}

/**
  * Grid Toggle Mixin
  * - Adds a background to a grid toggle that can be triggered by JavaScript
**/
.grid-toggle {
  @include grid-toggle-layout;
}

/**
  * Background Grid Mixin
  * - Finds the correct columns and gutters to use for Background Build mixin. If multiple grids are defined in $grids, will create a responsive background image
**/
.background-grid__default {
  /* Global Grid Context */
  _grids: "#{$grids}";
  _gutters: "#{$gutters}";
  @include background-grid();
}

.background-grid__custom-grid {
  /* Global Grid Context */
  _grids: "12";
  _gutters: "#{$gutters}";
  @include background-grid(12);
}

.background-grid__custom-gutter {
  /* Global Grid Context */
  _grids: "#{$grids}";
  _gutters: ".25";
  @include background-grid($gutter: .25);
}

.background-grid__custom-color {
  /* Global Grid Context */
  _grids: "#{$grids}";
  _gutters: "#{$gutters}";
  _color: "purple";
  @include background-grid($color: purple);
}

.background-grid__custom-grid-gutter {
  /* Global Grid Context */
  _grids: "12";
  _gutters: ".25";
  @include background-grid(12, .25);
}

/**
  * Background Build mixin
  * - Generates a list of widths and colors to be passed into Background Gradient Generate which then gets added to the selector
**/
.background-build__symmetric {
  _grids: "12";
  _gutters: ".25";
  _color: "green";
  @include background-build(12, .25, green);
}

.background-build__asymmetric {
  _grids: "2 4 6";
  _gutters: ".2";
  _color: "red";
  @include background-build(2 4 6, .2, red);
}

/**
  * Background Gradient Generate mixin
  * - Generates a CSS gradient based on a list of widths and colors
**/
$widths: 25% 50% 75% 100%;
$colors: red white blue green;
.background-gradient-generate {
  _widths: "#{$widths}";
  _colors: "#{$colors}";
  @include background-gradient-generate($widths, $colors);
}

.background-gradient-generate__custom-direction {
  _widths: "#{$widths}";
  _colors: "#{$colors}";
  _direction: "top right";
  @include background-gradient-generate($widths, $colors, top right);
}