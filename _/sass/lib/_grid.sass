// MEASUREMENTS

// Grid types to work on -- column, scale
$grid-type: column !default
$scale-grid-direction: rtl !default

$base-size: 16px !default
$line-height: 1.3em !default

$grid-width: 90% !default
$columns: 12 !default
$wrapper-align: center !default
$gutter: 2% !default
$padding: 0 !default

$max-width: dp(1400) !default

// DEFATULTS TO OOSASS WITH @EXTEND
$oocss-grid: false !default

// BUILD GRID OBJECTS
$object-type: "%" !default
@if $oocss-grid
  $grid-placeholder: "." !default
$width-prefix: "w-" !default
$column-prefix: "c-" !default

html
  font-size: $base-size
  line-height: $line-height

#{$object-type}wrapper
  width: $grid-width
  max-width: $max-width
  position: relative
  @if $wrapper-align == "center"
    margin-left: auto
    margin-right: auto
  @if $wrapper-align == "right"
    margin-left: auto
    margin-right: 0

// COLUMN GRID
$calculated-gutter: $gutter
@if $gutter == 0
  $gutter: 0%
@if unit($gutter) != "%"
  $calculated-gutter: percentage($gutter / $grid-width)
$calculated-column: (100% - ($calculated-gutter * ($columns - 1))) / $columns
@function grid($units, $grid-width)
  @return ($calculated-column * $units) + ($calculated-gutter * ($units - 1))

// For the next column in a series. It floats and spaces to sit on the grid next to the one before it.
#{$object-type}column
  float: left
  @if $padding != 0
    padding: 0 $padding
    // box sizing to make sure padding doesn't effect grid.
    +prefix(box-sizing, border-box, -webkit- -moz-)
    .html.no-box-sizing &
      // Remove padding if box-sizing isn't supported via modernizer
      padding: 0

#{$object-type}next-column
  margin-left: $calculated-gutter

// Grid widths
@for $i from 1 through $columns
  // Writes classes or placeholders depending on the $object-type variable.
  // You may also like a more semantic prefix, like "width-". You can chage it by changing the $width-prefix variable.
  #{$object-type}#{$width-prefix+$i}
    width:  grid($i)

// Column locations in absolute positions. Use next-col in a series.
@for $i from 0 through $columns
  // Writes classes or placeholders depending on the $object-type variable.
  // You may also like a more semantic prefix, like "column-". You can chage it by changing the $column-prefix variable.
  #{$object-type}#{$column-prefix+$i}
    position: absolute
    left:  grid($i) + $calculated-gutter


// Scale grid math
// Requires modular-scale (https://github.com/scottkellum/modular-scale)
$modular-scale-loaded: false !default
$scale-grid-direction: ltr !default

@if $grid-type == "scale"
  @if $modular-scale-loaded
    
    // Core logic function
    @function ms-grid($units, $ratio)
      $column-sum: 100%
      $grid-sum: 0%
      $column-ratio: $ratio
      $return: 0
      $column-short: false
      @if $ratio > 1
        $column-ratio: 1 / $ratio
      @for $i from 1 through $units
        $column-sum: ms($i, 100%, $column-ratio)
        $grid-sum: $column-sum + $grid-sum
        $return: $column-sum
        @if $grid-sum > 100%
          $return: 0%
          @if $column-short == false
            $column-short: $i
        @if $i == $columns
          @if $grid-sum < 100%
            $return: 100% - $grid-sum + $column-sum
        @if $column-short == $i
          $return: 100% - $grid-sum + $column-sum
      @return $return

    // Create array of all columns on the grid
    $ms-grid-list: ms-grid(1)
    @for $i from 2 through $columns
      $ms-grid-list: join($ms-grid-list, ms-grid($i))
    
    $counter: 0 // counter that knows how many columns are used for placement

    // Calculate the units on the grid
    @function grid($units, $counter)
      $half-gutter: false
      @if $counter == 1 or ($counter + $units) == $columns
        $half-gutter: true
      @if $counter > $columns
        $counter: 1
      @if $counter < 1
        $counter: 1
      
      $grid-return: 0 // zero out grid return

      // Add up the columns
      @for $i from 1 through $units
        @if $scale-grid-direction == ltr
          $grid-return: $grid-return + nth($ms-grid-list, abs($columns - $counter) + 1)
        @if $scale-grid-direction == rtl
          $grid-return: $grid-return + nth($ms-grid-list, $counter)
        // the only difference between rtl and ltr is this
        $counter: $counter + 1
        @if $i == $units
          @if $counter == 0
            $half-gutter: true
          @if $half-gutter
            @return $grid-return - ($calculated-gutter / 2)
          @return $grid-return - $calculated-gutter


  @if $modular-scale-loaded == false
    @warn "Modular-Scale needs to be loaded to use a scale grid"
    @warn "https://github.com/scottkellum/modular-scale"

// Simple mixin that figures it all out.
$grid-mixin-counter: 0

=grid($units, $grid-override: false)
  // Add padding to items on the grid.
  width: grid($units, $grid-mixin-counter + 1)
  @extend #{$object-type}column
  @if $grid-mixin-counter >= $columns
    $grid-mixin-counter: 0
  @if $grid-mixin-counter != 0
    @extend #{$object-type}next-column
  $grid-mixin-counter: $grid-mixin-counter + $units
