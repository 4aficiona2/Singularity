// MEASUREMENTS

// Grid types to work on -- column, scale
$grid-type: column !default
$scale-grid-direction: rtl !default
$scale-grid-style: incremental !default

$base-size: 16px !default
$line-height: 1.3em !default

$grid-width: 90% !default
$columns: 12 !default
$wrapper-align: center !default
$gutter: 2% !default
$padding: 0 !default

$max-width: dp(1400) !default

$breakpoint: ""

// DEFATULTS TO OOSASS WITH @EXTEND
$oocss-grid: false !default

// BUILD GRID OBJECTS
$object-type: "%" !default
@if $oocss-grid
  $grid-placeholder: "." !default
$width-prefix: "w-" !default
$column-prefix: "c-" !default

html
  font-size: $base-size
  line-height: $line-height

// Seed variables
$calculated-gutter: 0
$calculated-column: 0

// Calculate grid metrics
=calculate-grid($columns, $gutter, $grid-width)
  $columns: $columns
  $gutter: $gutter
  $grid-width: $grid-width
  // COLUMN GRID
  $calculated-gutter: $gutter
  @if $gutter == 0
    $gutter: 0%
  @if unit($gutter) != "%"
    $calculated-gutter: percentage($gutter / $grid-width)
  $calculated-column: (100% - ($calculated-gutter * ($columns - 1))) / $columns
+calculate-grid

// Define grid funciton
@function grid($units, $grid-width)
  @return ($calculated-column * $units) + ($calculated-gutter * ($units - 1))

=write-objects($breakpoint)
  #{$object-type}wrapper#{$breakpoint}
    width: $grid-width
    max-width: $max-width
    position: relative
    @if $wrapper-align == "center"
      margin-left: auto
      margin-right: auto
    @if $wrapper-align == "right"
      margin-left: auto
      margin-right: 0
  
  #{$object-type}column#{$breakpoint}
    float: left
    margin-left: $calculated-gutter
    @if $padding != 0
      padding: 0 $padding
      // box sizing to make sure padding doesn't effect grid.
      +prefix(box-sizing, border-box, -webkit- -moz-)
      // Polyfill for old IE https://github.com/Schepp/box-sizing-polyfill
      *behavior: url(../js/boxsizing.htc)
  
  #{$object-type}all-columns#{$breakpoint}
    width: 100%
  
  #{$object-type}first-column#{$breakpoint}
    margin-left: 0
    clear: both
  
  // Grid widths
  @for $i from 1 through $columns
    #{$object-type}#{$width-prefix+$i}#{$breakpoint}
      width:  grid($i)

+write-objects($breakpoint)

=wrapper
  @extend #{$object-type}wrapper#{$breakpoint}

// For the next column in a series. It floats and spaces to sit on the grid next to the one before it.
=column
  @extend #{$object-type}column#{$breakpoint}

=all-columns
  @extend #{$object-type}all-columns#{$breakpoint}

=first-column
  @extend #{$object-type}first-column#{$breakpoint}

// Column locations in absolute positions. Use next-col in a series.
=grid-columns
  @for $i from 0 through $columns
    // Writes classes or placeholders depending on the $object-type variable.
    // You may also like a more semantic prefix, like "column-". You can chage it by changing the $column-prefix variable.
    #{$object-type}#{$column-prefix+$i}
      position: absolute
      left:  grid($i) + $calculated-gutter

+grid-columns


// Scale grid math
// Requires modular-scale (https://github.com/scottkellum/modular-scale)
$modular-scale-loaded: false !default
$scale-grid-direction: ltr !default

@if $grid-type == "scale"
  @if $modular-scale-loaded
    
    // Core logic function
    @function ms-grid($units, $ratio)
      $column-sum: 100%
      $grid-sum: 0%
      $column-ratio: $ratio
      $return: 0
      $column-short: false
      @if $ratio > 1
        $column-ratio: 1 / $ratio
      @if $scale-grid-style == traditional
        @for $i from 1 through $units
          $column-sum: ms($i, 100%, $column-ratio)
          $grid-sum: $column-sum + $grid-sum
          $return: $column-sum
          @if $grid-sum > 100%
            $return: 0%
            @if $column-short == false
              $column-short: $i
          @if $i == $columns
            @if $grid-sum < 100%
              $return: 100% - $grid-sum + $column-sum
          @if $column-short == $i
            $return: 100% - $grid-sum + $column-sum
      @if $scale-grid-style == incremental
        @for $i from 1 through $units
          $return: ms(-1, $column-sum, (1 / $column-ratio))
          $column-sum: $column-sum - $return
          $grid-sum: $return + $grid-sum
          @if $grid-sum > 100%
            $return: 0%
            @if $column-short == false
              $column-short: $i
          @if $i == $columns
            @if $grid-sum < 100%
              $return: $column-sum
          @if $column-short == $i
            $return: $column-sum
      @return $return

    // Create array of all columns on the grid
    $ms-grid-list: ms-grid(1)
    @for $i from 2 through $columns
      $ms-grid-list: join($ms-grid-list, ms-grid($i))
    
    $ms-grid-list-sum: 0
    @for $i from 1 through $columns
      $ms-grid-list-sum: $ms-grid-list-sum + nth($ms-grid-list, $i)
        
    $counter: 1 // counter that knows how many columns are used for placement

    // Calculate the units on the grid
    @function grid($units, $counter)
      $half-gutter: false
      @if $counter > $columns
        $counter: 1
      @if $counter < 1
        $counter: 1
      @if $counter == 1 or ($counter + $units) == $columns
        $half-gutter: true
      
      $grid-return: 0 // zero out grid return

      // Add up the columns
      @for $i from 1 through $units
        @if $scale-grid-direction == ltr
          $grid-return: $grid-return + nth($ms-grid-list, abs($columns - $counter) + 1)
        @if $scale-grid-direction == rtl
          $grid-return: $grid-return + nth($ms-grid-list, $counter)
        // the only difference between rtl and ltr is this
        $counter: $counter + 1
        @if $i == $units
          @if $counter > ($columns) and $ms-grid-list-sum < 100%
            $grid-return: $grid-return - ($ms-grid-list-sum - 100%)
          @if $half-gutter
            @return $grid-return - ($calculated-gutter / 2)
          @return $grid-return - $calculated-gutter


  @if $modular-scale-loaded == false
    @warn "Modular-Scale needs to be loaded to use a scale grid"
    @warn "https://github.com/scottkellum/modular-scale"

// Simple mixin that figures it all out.
$grid-mixin-counter: 0

=grid($units, $grid-override: false)
  // If object spans all columns
  @if $grid-override
    $grid-mixin-counter: $grid-override - 1
  @if $units == $columns
    @extend #{$object-type}column#{$breakpoint}
    @extend #{$object-type}all-columns#{$breakpoint}
  @else
    @extend #{$object-type}column#{$breakpoint}
    @if $grid-type == "scale"
      // Width objects for Modular Scales are tricky, write width directly.
      width: grid($units, $grid-mixin-counter + 1)
    @else
      // extend width objects
      @extend #{$object-type}#{$width-prefix+$units}#{$breakpoint}
    // reset counters
    @if $grid-mixin-counter >= $columns
      $grid-mixin-counter: 0
    @if $grid-mixin-counter == 0
      @extend #{$object-type}first-column#{$breakpoint}
    $grid-mixin-counter: $grid-mixin-counter + $units

=recalculate($breakpoint)
  $breakpoint: $breakpoint
  +calculate-grid
  +write-objects


// Mixin to test grid
=test-grid($prefix: a)
  .test
    display: none
    height: 6em
    > .inner
      background-color: rgba(#fff, .5)
      height: 6em
  
  @for $i from 1 through $columns
    .#{$prefix}#{$i}
      display: block !important
      @if ($i / 2) == round($i / 2)
        background-color: #f66
      @else
        background-color: #f99
      @if $i == 1
        background-color: #6f6
      +grid(1, $i)
      @if $i == $columns
        background-color: #66f
