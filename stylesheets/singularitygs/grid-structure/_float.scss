@mixin float-clear($dir, $grid-output-block: both) {
  @if $dir == 'left' {
    clear: right;
  }
  @else if $dir == 'right' {
    clear: left;
  }
  @else if $dir == 'both' {
    clear: both;
  }

  @include singularity-clearfix();
}

@mixin float-common($columns: $columns, $gutter: $gutter, $padding: $padding, $grid-output-block: common) {
  @if $grid-output-block != section {

    @if $set-box-sizing {
      @include box-sizing(border-box);
      *behavior: url("../behaviors/box-sizing/boxsizing.php");
    }

    @if $grid-output-block == both or $grid-output-block == common {
      @if $padding != 0 {
        @if type-of($padding) == 'list' {
          padding-left: nth($padding, 1);
          padding-right: nth($padding, 2);
        }
        @else {
          padding-left: $padding;
          padding-right: $padding;
        }
      }
    }
  }
}

@mixin float-section($span, $location: $grid-counter, $columns: $columns, $gutter: $gutter, $padding: $padding, $grid-output-block: section) {
  @if $grid-output-block == section or $grid-output-block == both {
    width: grid-span($span, $location, $columns, $gutter);
    // add special left padding
    @include grid-location($span, $location, $columns);

    @if $dir == ltr or $dir == both {
      @if $grid-location == 'middle' or $grid-location == 'first'{
        float: left;
        margin-right: gutter-span($gutter, $columns);
      }
      @else if $grid-location == 'last' {
        float: right;
      }
      @include float-clear('left');
    }
    @if $dir == rtl {
      @if $grid-location == 'middle' or $grid-location == 'first' {
        float: right;
        margin-left: gutter-span($gutter, $columns);
      }
      @else if $grid-location == 'last' {
        float: left;
      }
      @include float-clear('right');
    }
    @if $dir == both {
      #{$rtl-selector} & {
        @if $grid-location == 'middle' or $grid-location == 'first' {
          float: right;
          margin-left: gutter-span($gutter, $columns);
        }
        @else if $grid-location == 'last' {
          float: left;
        }
        @include float-clear('right');
      }
    }
  }
}

// main structure mixin
@mixin float-structure($span, $location, $columns, $gutter, $padding, $grid-output-block: both) {

  // Full output
  @if $grid-output-block == both {
    @include float-common($columns, $gutter, $padding, $grid-output-block);
    @include float-section($span, $location, $columns, $gutter, $padding, $grid-output-block);
  }

  // Only the shared components
  @if $grid-output-block == common {
    @include float-common($columns, $gutter, $padding, $grid-output-block);
  }

  // Only the section components
  @if $grid-output-block == section {
    @include float-section($span, $location, $columns, $gutter, $padding, $grid-output-block);
  }
}