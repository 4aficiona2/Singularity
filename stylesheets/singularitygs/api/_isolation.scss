@function output-isolation($Span-Map) {
  // Set up Left/Right maps
  $Return: (
    'exclude': (
      'right': 'width'
    )
  );

  $Span: map-get($Span-Map, 'span');
  $Location: map-get($Span-Map, 'location');

  $Grid: map-get($Span-Map, 'grid');
  $Gutter: map-get($Span-Map, 'gutter');
  $Style: map-get($Span-Map, 'style');

  $Start-Row: map-get($Span-Map, 'start row');
  $End-Row: map-get($Span-Map, 'end row');

  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');
  $Split-Gutter: map-get($Span-Map, 'split gutter');
  $Gutter-Property: map-get($Span-Map, 'gutter property');

  $Options: map-get($Span-Map, 'options');

  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);
  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);
  $Gutter-Span: gutter-span($Gutter, $Grid);

  // Backwards Compatibility for Options
  @if type-of($Options) != 'map' and $Options != null {
    $Options: ('clear': unquote(nth($Options, 1)));
  }

  $directions: 'ltr' 'rtl';

  @each $direction in $directions {
    // Set up direction and holder
    $Holder: ();
    $CSSDir: $direction;
    // Find the CSS named direction and opposite direction

    $Dir: named-direction($CSSDir);
    $Opp: opposite-direction($Dir);

    $Holder: map-merge($Holder, ('width': $Width));

    @if ($End-Row) {
      $Holder: map-merge($Holder, ('float': $Opp));
      $Holder: map-merge($Holder, ('margin-#{$Dir}': 0));

      @if $Split-Gutter and not $Fixed-Gutter {
        $Holder: map-merge($Holder, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));
      }
      @else {
        $Holder: map-merge($Holder, ('margin-#{$Opp}': 0));
      }
    }
    @else {
      $Holder: map-merge($Holder, ('float': $Dir));
      $Holder: map-merge($Holder, ('margin-#{$Opp}': -100%));

      @if $Start-Row {
        @if $Split-Gutter and not $Fixed-Gutter {
          $Holder: map-merge($Holder, ('margin-#{$Dir}': $Gutter-Span / 2));
        }
        @else if not $Fixed-Gutter {
          $Holder: map-merge($Holder, ('margin-#{$Dir}': 0));
        }
      }
      @else {
        @if $Split-Gutter and not $Fixed-Gutter {
          $Holder: map-merge($Holder, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span + $Gutter-Span / 2));
        }
        @else if not $Fixed-Gutter {
          $Holder: map-merge($Holder, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span));
        }
      }
    }
    // If options are set, we merge them in!
    @if ($Options) {
      $Holder: map-merge($Holder, $Options);
    }

    // If CLear isn't already available, set it!
    @if not map-has-key($Holder, 'clear') {
      $Holder: map-merge($Holder, ('clear': none));
    }

    // Left Fixed Gutters
    @if $Fixed-Gutter {
      @if index($Gutter-Style, 'split') {
        $Holder: map-merge($Holder, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));
        $Holder: map-merge($Holder, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));
      }
      @else {
        $Holder: map-merge($Holder, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));
      }
    }

    $Return: map-merge($Return, ('#{$Dir}': $Holder));
  }

  @return $Return;
}

//////////////////////////////
// Happy Syntax for Isolation
//
// Makes working with Isolation easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call
//////////////////////////////
@mixin isolation-span($Span, $Location, $clear: false, $grid: false, $gutter: false) {
  @include grid-span($Span, $Location, $grid, $gutter, 'isolation', ('clear': $clear));
}
