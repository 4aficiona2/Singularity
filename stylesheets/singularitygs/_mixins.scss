// Converted old Grid Span into Grid Build
// It a piece of cake to make a pretty grid, CAKE!
@mixin grid-build($span, $location, $columns, $gutter, $padding) {
  @include box-sizing(border-box);
  *behavior: url('../behaviors/box-sizing/boxsizing.php');
  width: grid-span($span, $location, $columns, $gutter);
  @if $grid-structure == float {
    @include structure-float($span, $location, $columns, $gutter);
  }
  // add special left padding
  @if type-of($columns) == list {
    @if type-of(nth($columns, $location)) == list {
      padding-left: nth(nth($columns, $location), 2);
    }
    @else if $padding != 0 {
      padding-left: $padding;
    }
    // add special right padding
    @if type-of(nth($columns, $location + $span - 1)) == list {
      padding-right: nth(nth($columns, $location + $span - 1), 2);
    }
    @else if $padding != 0 {
      padding-right: $padding;
    }
  }
  @else if $padding != 0 {
    padding: 0 $padding;
  }
  // bump up the counter
  $grid-counter: $location + $span;
  @if $grid-counter > column-count($columns) {
    $grid-counter: 1;
  }
}

// This writes classes, IDs, or silent objects for you to extend or use in your HTML. They can be written to different breakpoints to extend or call into your HTML as needed.
@mixin grid-objects($prefix: a, $columns: $columns, $gutter: $gutter, $padding: $padding, $selector: "%") {
  $grouped-styles: true;
  // counter keeps track of the starting position
  $count: 0;
  %#{$prefix}column {
    @if $dir == ltr or $dir == both {
      margin-right: -100%;
      float: left;
    }
    @if $dir == rtl {
      margin-left: -100%;
      float: right;
    }
    @if $dir == both {
      #{$rtl-selector} & {
        margin-left: -100%;
        float: right;
      }
    }
    float: left;
    @include grid-padding($padding);
    margin-right: $gutter;
  }
// This function now labels object prefix+span.location
  @for $i from 1 through column-count($columns) {
    @for $n from 1 through (column-count($columns) - $count) {
      #{$selector}#{$prefix}#{$n}-#{$count + 1} {
        @extend %#{$prefix}column;
        @include grid-span($n, $count + 1, $columns, $gutter);
      }
    }
    $count: $count + 1;
  }
}

// Add padding to an object on the grid.
@mixin grid-padding($padding) {
  @if $padding != 0 {
    padding: 0 $padding;
    @include box-sizing(border-box);
    *behavior: url('../behaviors/box-sizing/boxsizing.php');
  }
}

//////////////////////////////
// Container Mixin
//////////////////////////////
@mixin container($max-width: $container, $bfs: $base-font-size) {
  $bfs-length: length($bfs);
  $bfs-counter: 1;

  @if length($containers) != 0 {
    $query: 'min-width';
    @if $grids-mobile-first == false {
      $query: 'max-width';
    }

    $total: length($containers);

    @if $total > 1 {
      @for $i from 2 through $total {

        @include breakpoint((nth(nth($containers, $i), 2) $query)) {
          $bfs-holder: bfs-finder($query);
          @if unit(nth(nth($containers, $i), 1)) != '%' and $container-to-ems == true {
            max-width: base-conversion(nth(nth($containers, $i), 1)) / base-conversion($bfs-holder) * 1em;;
          }
          @else {
            max-width: nth(nth($containers, $i), 1);
          }
        }
      }
    }
    @if unit(nth($containers, 1)) != '%' {
      max-width: breakpoint-to-base-em(nth($containers, 1), nth($bfs, 1));
    }
    @else {
      max-width: nth($containers, 1);
    }
  }
  @else {
    @if unit($max-width) != '%' and $container-to-ems == true {
      max-width: base-conversion($max-width) / base-conversion($bfs) * 1em;
    }
    @else {
      max-width: $max-width;
    }
  }

  //////////////////////////////
  // Center Container
  //////////////////////////////
  margin: 0 auto;
  
  //////////////////////////////
  // Overflow: Hidden
  //////////////////////////////
  overflow: hidden;
  
  //////////////////////////////
  // Border box and clearfix
  //////////////////////////////
  @include box-sizing(border-box);
  *behavior: url('../behaviors/box-sizing/boxsizing.php');

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }

  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    /* for IE 6/7 */
    *zoom: expression(this.runtimeStyle.zoom="1", this.appendChild(document.createElement("br")).style.cssText="clear:both;font:0/0 serif");
  }
  /* non-JS fallback */
  *zoom: 1;
}

//////////////////////////////
// Base Font Size in HTML tag
// NOT DONE YET!
//////////////////////////////
@mixin base-font-sizing($bfs: $base-font-size) {
  $bfs-length: length($base-font-size);
  $query: 'min-width';
  @if $grids-mobile-first == false {
    $query: 'max-width';
  }

  html {
    font-size: nth($bfs, 1);

    @if $bfs-length > 1 {
      @for $i from 2 through $bfs-length {
        @include breakpoint((nth(nth($bfs, $i), 2) $query)) {
          font-size: nth(nth($bfs, $i), 1);
        }
      }
    }
  }
}

////////////////////////////////
//// Find Base Font Size
////////////////////////////////
@function bfs-finder($query) {
  $context: breakpoint-get-context($query);
  $reverse: reverse($base-font-size);

  @if $grids-mobile-first == false {
    $query: 'max-width';
  }

  @if $query == "min-width" and $context != false {
    @each $size in $reverse {
      @if length($size) == 2 {
        @if nth($size, 2) < $context {
          @return nth($size, 1);
        }
      }
      @else {
        @return nth($base-font-size, 1);
      }
    }
  }
  @else if $query == "max-width" and $context != false {
    @each $size in $reverse {
      @if length($size) == 2 {
        @if nth($size, 2) > $context {
          @return nth($size, 1);
        }
      }
      @else {
        @return nth($base-font-size, 1);
      }
    }
  }
  @else {
    @return nth($base-font-size, 1);
  }
}